# python version 1.0						DO NOT EDIT
#
# This python file has been generated by smidump version 0.5.0:
#
#   smidump -f python URI-TC-MIB

FILENAME = "./libsmi-0.5.0/mibs/ietf/URI-TC-MIB"

MIB = {
    "moduleName" : "URI-TC-MIB",

    "URI-TC-MIB" : {
        "nodetype" : "module",
        "language" : "SMIv2",
        "organization" :    
            """IETF Operations and Management (OPS) Area""",
        "contact" : 
            """EMail: ops-area@ietf.org
Home page: http://www.ops.ietf.org/""",
        "description" :
            """This MIB module defines textual conventions for
representing URIs, as defined by RFC 3986 STD 66.""",
        "revisions" : (
            {
                "date" : "2007-09-10 00:00",
                "description" :
                    """Initial revision, published as RFC 5017.

Copyright (C) The IETF Trust (2007).  This version of this
MIB module is part of RFC 5017; see the RFC itself for full



legal notices.""",
            },
        ),
        "identity node" : "uriTcMIB",
    },

    "imports" : (
        {"module" : "SNMPv2-SMI", "name" : "MODULE-IDENTITY"},
        {"module" : "SNMPv2-SMI", "name" : "mib-2"},
        {"module" : "SNMPv2-TC", "name" : "TEXTUAL-CONVENTION"},
    ),

    "typedefs" : {
        "Uri" : {
            "basetype" : "OctetString",
            "status" : "current",
            "format" : "1a",
            "description" :
                """A Uniform Resource Identifier (URI) as defined by STD 66.

Objects using this TEXTUAL-CONVENTION MUST be in US-ASCII
encoding, and MUST be normalized as described by RFC 3986
Sections 6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary
percent-encoding is removed, and all case-insensitive
characters are set to lowercase except for hexadecimal
digits, which are normalized to uppercase as described in
Section 6.2.2.1.

The purpose of this normalization is to help provide unique
URIs.  Note that this normalization is not sufficient to
provide uniqueness.  Two URIs that are textually distinct
after this normalization may still be equivalent.

Objects using this TEXTUAL-CONVENTION MAY restrict the
schemes that they permit.  For example, 'data:' and 'urn:'
schemes might not be appropriate.

A zero-length URI is not a valid URI.  This can be used to
express 'URI absent' where required, for example when used
as an index field.

Where this TEXTUAL-CONVENTION is used for an index field,
it MUST be subtyped to restrict its length.  There is an
absolute limit of 128 subids for an OID, and it is not
efficient to have OIDs whose length approaches this
limit.""",
            "reference" :
                """RFC 3986 STD 66 and RFC 3305""",
        },
        "Uri255" : {
            "basetype" : "OctetString",
            "status" : "current",
            "ranges" : [
            {
                "min" : "0",
                "max" : "255"
            },
            ],
            "range" : {
                "min" : "0",
                "max" : "255"
            },
            "format" : "255a",
            "description" :
                """A Uniform Resource Identifier (URI) as defined by STD 66.

Objects using this TEXTUAL-CONVENTION MUST be in US-ASCII
encoding, and MUST be normalized as described by RFC 3986
Sections 6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary
percent-encoding is removed, and all case-insensitive



characters are set to lowercase except for hexadecimal
digits, which are normalized to uppercase as described in
Section 6.2.2.1.

The purpose of this normalization is to help provide unique
URIs.  Note that this normalization is not sufficient to
provide uniqueness.  Two URIs that are textually distinct
after this normalization may still be equivalent.

Objects using this TEXTUAL-CONVENTION MAY restrict the
schemes that they permit.  For example, 'data:' and 'urn:'
schemes might not be appropriate.

A zero-length URI is not a valid URI.  This can be used to
express 'URI absent' where required, for example when used
as an index field.

STD 66 URIs are of unlimited length.  Objects using this
TEXTUAL-CONVENTION impose a length limit on the URIs that
they can represent.  Where no length restriction is
required, objects SHOULD use the 'Uri' TEXTUAL-CONVENTION
instead.  Objects used as indices SHOULD subtype the 'Uri'
TEXTUAL-CONVENTION.""",
            "reference" :
                """RFC 3986 STD 66 and RFC 3305""",
        },
        "Uri1024" : {
            "basetype" : "OctetString",
            "status" : "current",
            "ranges" : [
            {
                "min" : "0",
                "max" : "1024"
            },
            ],
            "range" : {
                "min" : "0",
                "max" : "1024"
            },
            "format" : "1024a",
            "description" :
                """A Uniform Resource Identifier (URI) as defined by STD 66.

Objects using this TEXTUAL-CONVENTION MUST be in US-ASCII
encoding, and MUST be normalized as described by RFC 3986
Sections 6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary
percent-encoding is removed, and all case-insensitive
characters are set to lowercase except for hexadecimal
digits, which are normalized to uppercase as described in
Section 6.2.2.1.

The purpose of this normalization is to help provide unique
URIs.  Note that this normalization is not sufficient to
provide uniqueness.  Two URIs that are textually distinct
after this normalization may still be equivalent.

Objects using this TEXTUAL-CONVENTION MAY restrict the
schemes that they permit.  For example, 'data:' and 'urn:'
schemes might not be appropriate.



A zero-length URI is not a valid URI.  This can be used to
express 'URI absent' where required, for example when used
as an index field.

STD 66 URIs are of unlimited length.  Objects using this
TEXTUAL-CONVENTION impose a length limit on the URIs that
they can represent.  Where no length restriction is
required, objects SHOULD use the 'Uri' TEXTUAL-CONVENTION
instead.  Objects used as indices SHOULD subtype the 'Uri'
TEXTUAL-CONVENTION.""",
            "reference" :
                """RFC 3986 STD 66 and RFC 3305""",
        },
    }, # typedefs

    "nodes" : {
        "uriTcMIB" : {
            "nodetype" : "node",
            "moduleName" : "URI-TC-MIB",
            "oid" : "1.3.6.1.2.1.164",
            "status" : "current",
        }, # node
    }, # nodes

}
